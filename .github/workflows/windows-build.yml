name: Build and Package STINO for Windows (MSIX)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build Windows MSIX Installer

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.32.5"

      - name: Install Visual Studio Build Tools
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Clean and rebuild
        run: |
          flutter clean
          flutter pub get
          flutter build windows --release

      - name: Verify Build Output
        shell: pwsh
        run: |
          $releasePath = "build/windows/x64/runner/Release"
          if (-not (Test-Path -Path $releasePath)) {
            Write-Error "Release folder not found!"
            exit 1
          }
          $exe = Get-ChildItem -Path $releasePath -Filter *.exe | Select-Object -First 1
          if (-not $exe) {
            Write-Error "No .exe found in $releasePath!"
            exit 1
          }
          Rename-Item -Path $exe.FullName -NewName "STINO.exe" -Force
          Write-Host "✅ Renamed executable to STINO.exe"

      - name: Generate self-signed certificate
        shell: pwsh
        run: |
          $certDir = "build/cert"
          New-Item -ItemType Directory -Force -Path $certDir | Out-Null
          $certPath = "$certDir\stino_cert.pfx"
          $password = ConvertTo-SecureString -String "stino123" -Force -AsPlainText
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=STINO" -CertStoreLocation "Cert:\LocalMachine\My"
          Export-PfxCertificate -Cert $cert -FilePath $certPath -Password $password
          Write-Host "✅ Self-signed certificate created"

      - name: Create placeholder assets
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Drawing
          $assetPath = "build/windows/x64/runner/Release/Assets"
          New-Item -ItemType Directory -Force -Path $assetPath | Out-Null
          $bmp = New-Object System.Drawing.Bitmap 256,256
          $gfx = [System.Drawing.Graphics]::FromImage($bmp)
          $gfx.Clear([System.Drawing.Color]::FromArgb(0,120,215))
          $bmp.Save("$assetPath\StoreLogo.png")
          $bmp.Save("$assetPath\Square150x150Logo.png")
          $bmp.Save("$assetPath\Square44x44Logo.png")
          $bmp.Save("$assetPath\Wide310x150Logo.png")
          $bmp.Save("$assetPath\SplashScreen.png")
          Write-Host "✅ Placeholder assets created"

      - name: Create AppxManifest.xml
        shell: pwsh
        run: |
          $releasePath = "build/windows/x64/runner/Release"
          $manifestPath = Join-Path $releasePath "AppxManifest.xml"
          $xml = @"
<?xml version='1.0' encoding='utf-8'?>
<Package xmlns='http://schemas.microsoft.com/appx/manifest/foundation/windows10'
         xmlns:uap='http://schemas.microsoft.com/appx/manifest/uap/windows10'
         xmlns:uap10='http://schemas.microsoft.com/appx/manifest/uap/windows10/10'
         xmlns:desktop='http://schemas.microsoft.com/appx/manifest/desktop/windows10'
         IgnorableNamespaces='uap uap10 desktop'>
  <Identity Name='STINO.App' Publisher='CN=STINO' Version='1.0.0.0' />
  <Properties>
    <DisplayName>STINO</DisplayName>
    <PublisherDisplayName>STINO</PublisherDisplayName>
    <Logo>Assets\StoreLogo.png</Logo>
  </Properties>
  <Dependencies>
    <TargetDeviceFamily Name='Windows.Desktop' MinVersion='10.0.17763.0' MaxVersionTested='10.0.26100.0' />
  </Dependencies>
  <Applications>
    <Application Id='App' Executable='STINO.exe' EntryPoint='Windows.FullTrustApplication' uap10:TrustLevel='mediumIL'>
      <uap:VisualElements DisplayName='STINO' Description='STINO Windows Application'
                          BackgroundColor='transparent'
                          Square150x150Logo='Assets\Square150x150Logo.png'
                          Square44x44Logo='Assets\Square44x44Logo.png'>
        <uap:DefaultTile Wide310x150Logo='Assets\Wide310x150Logo.png' />
        <uap:SplashScreen Image='Assets\SplashScreen.png' />
      </uap:VisualElements>
      <Extensions>
        <desktop:Extension Category='windows.fullTrustProcess' Executable='STINO.exe' />
      </Extensions>
    </Application>
  </Applications>
  <Capabilities>
    <Capability Name='internetClient' />
    <rescap:Capability Name='runFullTrust' xmlns:rescap='http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities'/>
  </Capabilities>
</Package>
"@
          $xml | Out-File -Encoding utf8 $manifestPath
          Write-Host "✅ AppxManifest.xml created"

      - name: Package and Sign MSIX
        shell: pwsh
        run: |
          $releasePath = "build/windows/x64/runner/Release"
          $outputDir = "build/msix"
          New-Item -ItemType Directory -Force -Path $outputDir | Out-Null
          $msixPath = "$outputDir\STINO_Installer.msix"
          $certPath = "build/cert/stino_cert.pfx"
          $password = "stino123"

          $makeappx = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter "makeappx.exe" | Where-Object { $_.FullName -like "*x64*" } | Sort-Object FullName -Descending | Select-Object -First 1
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter "signtool.exe" | Where-Object { $_.FullName -like "*x64*" } | Sort-Object FullName -Descending | Select-Object -First 1

          & $makeappx.FullName pack /d $releasePath /p $msixPath /o
          if ($LASTEXITCODE -ne 0) { Write-Error "makeappx failed"; exit 1 }

          & $signtool.FullName sign /f $certPath /p $password /fd SHA256 /v $msixPath
          if ($LASTEXITCODE -ne 0) { Write-Error "signtool failed"; exit 1 }

          Write-Host "✅ Signed MSIX package created"

      - name: Create PowerShell installer script
        shell: pwsh
        run: |
          $scriptPath = "build/msix/install-stino.ps1"
          Set-Content -Path $scriptPath -Value @"
Write-Host 'Installing STINO Certificate and Application...'
\$certPath = '.\stino_cert.pfx'
\$msixPath = '.\STINO_Installer.msix'
\$password = ConvertTo-SecureString 'stino123' -AsPlainText -Force
Import-PfxCertificate -FilePath \$certPath -CertStoreLocation Cert:\LocalMachine\Root -Password \$password
Add-AppxPackage -Path \$msixPath
Write-Host '✅ STINO installed successfully!'
"@ -Encoding UTF8
          Write-Host "✅ install-stino.ps1 created"

      - name: Create distributable ZIP
        shell: pwsh
        run: |
          $outputZip = "build/STINO_Installer_Package.zip"
          Compress-Archive -Path "build/msix/STINO_Installer.msix","build/cert/stino_cert.pfx","build/msix/install-stino.ps1" -DestinationPath $outputZip -Force
          Write-Host "✅ Distribution ZIP created"

      - name: Upload MSIX + Installer ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: STINO_Windows_Installer
          path: build/STINO_Installer_Package.zip
