name: Build and Package STINO for Windows (MSIX)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build Windows MSIX Installer

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.32.5'

      - name: Install Visual Studio Build Tools
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Clean and rebuild
        run: |
          flutter clean
          flutter pub get
          flutter build windows --release

      - name: Verify Build Output
        shell: pwsh
        run: |
          $releasePath = 'build/windows/x64/runner/Release'
          if (-not (Test-Path -Path $releasePath)) {
            Write-Error "ERROR: Release folder not found at $releasePath!"
            exit 1
          }
          $exe = Get-ChildItem -Path $releasePath -Filter '*.exe' -File | Select-Object -First 1
          if (-not $exe) {
            Write-Error "ERROR: No .exe found in $releasePath!"
            exit 1
          }
          Rename-Item -Path $exe.FullName -NewName 'STINO.exe' -Force
          Write-Host "✅ Renamed executable to STINO.exe"

      - name: Generate self-signed certificate
        shell: pwsh
        run: |
          $certDir = 'build/cert'
          New-Item -ItemType Directory -Force -Path $certDir | Out-Null
          $certPath = Join-Path $certDir 'stino_cert.pfx'
          $password = ConvertTo-SecureString -String 'stino123' -Force -AsPlainText
          # Use CurrentUser store to avoid permission issues on hosted runner
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject 'CN=STINO' -CertStoreLocation 'Cert:\CurrentUser\My'
          if (-not $cert) { Write-Error "ERROR: Failed to create self-signed certificate"; exit 1 }
          Export-PfxCertificate -Cert $cert -FilePath $certPath -Password $password
          if (-not (Test-Path $certPath)) { Write-Error "ERROR: Failed to export PFX to $certPath"; exit 1 }
          Write-Host "✅ Self-signed certificate created at $certPath"

      - name: Create AppxManifest.xml
        shell: pwsh
        run: |
          $releasePath = 'build/windows/x64/runner/Release'
          $manifestPath = Join-Path $releasePath 'AppxManifest.xml'
          if (-not (Test-Path $releasePath)) { Write-Error "ERROR: Release path not found: $releasePath"; exit 1 }

          # Write manifest lines one-by-one to avoid YAML here-string issues
          Set-Content -Path $manifestPath -Value '<?xml version="1.0" encoding="utf-8"?>'
          Add-Content -Path $manifestPath -Value '<Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"'
          Add-Content -Path $manifestPath -Value '         xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"'
          Add-Content -Path $manifestPath -Value '         xmlns:uap10="http://schemas.microsoft.com/appx/manifest/uap/windows10/10"'
          Add-Content -Path $manifestPath -Value '         xmlns:desktop="http://schemas.microsoft.com/appx/manifest/desktop/windows10"'
          Add-Content -Path $manifestPath -Value '         xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"'
          Add-Content -Path $manifestPath -Value '         IgnorableNamespaces="uap uap10 desktop rescap">'
          Add-Content -Path $manifestPath -Value '  <Identity Name="STINO.App" Publisher="CN=STINO" Version="1.0.0.0" />'
          Add-Content -Path $manifestPath -Value '  <Properties>'
          Add-Content -Path $manifestPath -Value '    <DisplayName>STINO</DisplayName>'
          Add-Content -Path $manifestPath -Value '    <PublisherDisplayName>STINO</PublisherDisplayName>'
          Add-Content -Path $manifestPath -Value '    <Logo>Assets\StoreLogo.png</Logo>'
          Add-Content -Path $manifestPath -Value '  </Properties>'
          Add-Content -Path $manifestPath -Value '  <Dependencies>'
          Add-Content -Path $manifestPath -Value '    <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.17763.0" MaxVersionTested="10.0.26100.0" />'
          Add-Content -Path $manifestPath -Value '  </Dependencies>'
          Add-Content -Path $manifestPath -Value '  <Resources>'
          Add-Content -Path $manifestPath -Value '    <Resource Language="en-us" />'
          Add-Content -Path $manifestPath -Value '  </Resources>'
          Add-Content -Path $manifestPath -Value '  <Applications>'
          Add-Content -Path $manifestPath -Value '    <Application Id="App"'
          Add-Content -Path $manifestPath -Value '                 Executable="STINO.exe"'
          Add-Content -Path $manifestPath -Value '                 EntryPoint="Windows.FullTrustApplication"'
          Add-Content -Path $manifestPath -Value '                 uap10:TrustLevel="mediumIL">'
          Add-Content -Path $manifestPath -Value '      <uap:VisualElements DisplayName="STINO"'
          Add-Content -Path $manifestPath -Value '                          Description="STINO Windows Application"'
          Add-Content -Path $manifestPath -Value '                          BackgroundColor="transparent"'
          Add-Content -Path $manifestPath -Value '                          Square150x150Logo="Assets\Square150x150Logo.png"'
          Add-Content -Path $manifestPath -Value '                          Square44x44Logo="Assets\Square44x44Logo.png">'
          Add-Content -Path $manifestPath -Value '        <uap:DefaultTile Wide310x150Logo="Assets\Wide310x150Logo.png" />'
          Add-Content -Path $manifestPath -Value '        <uap:SplashScreen Image="Assets\SplashScreen.png" />'
          Add-Content -Path $manifestPath -Value '      </uap:VisualElements>'
          Add-Content -Path $manifestPath -Value '      <Extensions>'
          Add-Content -Path $manifestPath -Value '        <desktop:Extension Category="windows.fullTrustProcess" Executable="STINO.exe" />'
          Add-Content -Path $manifestPath -Value '      </Extensions>'
          Add-Content -Path $manifestPath -Value '    </Application>'
          Add-Content -Path $manifestPath -Value '  </Applications>'
          Add-Content -Path $manifestPath -Value '  <Capabilities>'
          Add-Content -Path $manifestPath -Value '    <Capability Name="internetClient" />'
          Add-Content -Path $manifestPath -Value '    <rescap:Capability Name="runFullTrust" />'
          Add-Content -Path $manifestPath -Value '  </Capabilities>'
          Add-Content -Path $manifestPath -Value '</Package>'

          if (-not (Test-Path $manifestPath)) { Write-Error "ERROR: Failed to create manifest at $manifestPath"; exit 1 }
          Write-Host "✅ AppxManifest.xml created successfully at $manifestPath"

      - name: Package and Sign MSIX
        shell: pwsh
        run: |
          $releasePath = 'build/windows/x64/runner/Release'
          $outputDir = 'build/msix'
          New-Item -ItemType Directory -Force -Path $outputDir | Out-Null
          $msixPath = Join-Path $outputDir 'STINO_Installer.msix'
          $certPath = 'build/cert/stino_cert.pfx'
          $password = 'stino123'

          $makeappx = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin\' -Recurse -Filter 'makeappx.exe' | Where-Object { $_.FullName -like '*x64*' } | Sort-Object FullName -Descending | Select-Object -First 1
          $signtool = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\bin\' -Recurse -Filter 'signtool.exe' | Where-Object { $_.FullName -like '*x64*' } | Sort-Object FullName -Descending | Select-Object -First 1

          if (-not $makeappx) { Write-Error '❌ makeappx.exe not found. Ensure Windows 10 SDK is installed.'; exit 1 }
          if (-not $signtool) { Write-Error '❌ signtool.exe not found. Ensure Windows 10 SDK is installed.'; exit 1 }

          Write-Host "✅ Using MakeAppx from: $($makeappx.FullName)"
          Write-Host "✅ Using SignTool from: $($signtool.FullName)"

          & $makeappx.FullName pack /d $releasePath /p $msixPath /o
          if ($LASTEXITCODE -ne 0) { Write-Error '❌ makeappx failed'; exit 1 }

          & $signtool.FullName sign /f $certPath /p $password /fd SHA256 /v $msixPath
          if ($LASTEXITCODE -ne 0) { Write-Error '❌ signtool failed'; exit 1 }

          Write-Host "✅ Signed MSIX package created at $msixPath"

      - name: Upload MSIX Artifact
        uses: actions/upload-artifact@v4
        with:
          name: STINO_Windows_MSIX
          path: build/msix/STINO_Installer.msix
