name: Build and Package STINO for Windows (MSIX)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows MSIX Installer
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.32.5'

      - name: Install Visual Studio Build Tools
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Clean and rebuild
        run: |
          flutter clean
          flutter pub get
          flutter build windows --release

      - name: Verify Build Output
        run: |
          $releasePath = "build/windows/x64/runner/Release"
          if (-not (Test-Path -Path $releasePath)) {
              Write-Error "ERROR: Release folder not found at $releasePath!"
              exit 1
          }
          $exe = Get-ChildItem -Path $releasePath -Filter *.exe | Select-Object -First 1
          if (-not $exe) {
              Write-Error "ERROR: No .exe found in $releasePath!"
              exit 1
          }
          Rename-Item -Path $exe.FullName -NewName "STINO.exe" -Force
          Write-Host "✅ Renamed executable to STINO.exe"
        shell: pwsh

      - name: Generate self-signed certificate
        run: |
          $certDir = "build/cert"
          New-Item -ItemType Directory -Force -Path $certDir | Out-Null
          $certPath = "$certDir\stino_cert.pfx"
          $password = ConvertTo-SecureString -String "stino123" -Force -AsPlainText
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=STINO" -CertStoreLocation "Cert:\LocalMachine\My"
          Export-PfxCertificate -Cert $cert -FilePath $certPath -Password $password
          Write-Host "✅ Self-signed certificate created at $certPath"
        shell: pwsh

      - name: Create AppxManifest.xml
        run: |
          $releasePath = "build/windows/x64/runner/Release"
          $manifestPath = Join-Path $releasePath "AppxManifest.xml"
          @"
          <?xml version="1.0" encoding="utf-8"?>
          <Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"
                   xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
                   xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"
                   IgnorableNamespaces="uap rescap">
            <Identity Name="STINO.App"
                      Publisher="CN=STINO"
                      Version="1.0.0.0" />
            <Properties>
              <DisplayName>STINO</DisplayName>
              <PublisherDisplayName>STINO</PublisherDisplayName>
              <Logo>Assets\StoreLogo.png</Logo>
            </Properties>
            <Dependencies>
              <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.17763.0" MaxVersionTested="10.0.26100.0" />
            </Dependencies>
            <Resources>
              <Resource Language="en-us"/>
            </Resources>
            <Applications>
              <Application Id="App"
                           Executable="STINO.exe"
                           EntryPoint="Windows.FullTrustApplication">
                <uap:VisualElements DisplayName="STINO"
                                    Description="STINO Windows Application"
                                    BackgroundColor="transparent"
                                    Square150x150Logo="Assets\Square150x150Logo.png"
                                    Square44x44Logo="Assets\Square44x44Logo.png">
                  <uap:DefaultTile Wide310x150Logo="Assets\Wide310x150Logo.png"/>
                  <uap:SplashScreen Image="Assets\SplashScreen.png"/>
                </uap:VisualElements>
              </Application>
            </Applications>
            <Capabilities>
              <rescap:Capability Name="runFullTrust" />
            </Capabilities>
          </Package>
          "@ | Out-File -Encoding utf8 $manifestPath
          Write-Host "✅ AppxManifest.xml created at $manifestPath"
        shell: pwsh

      - name: Package and Sign MSIX
        run: |
          $releasePath = "build/windows/x64/runner/Release"
          $outputDir = "build/msix"
          New-Item -ItemType Directory -Force -Path $outputDir | Out-Null
          $msixPath = "$outputDir\STINO_Installer.msix"
          $certPath = "build/cert/stino_cert.pfx"
          $password = "stino123"

          $makeappx = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter "makeappx.exe" | Where-Object { $_.FullName -like "*x64*" } | Sort-Object FullName -Descending | Select-Object -First 1
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter "signtool.exe" | Where-Object { $_.FullName -like "*x64*" } | Sort-Object FullName -Descending | Select-Object -First 1

          Write-Host "✅ Using MakeAppx from: $($makeappx.FullName)"
          Write-Host "✅ Using SignTool from: $($signtool.FullName)"

          & $makeappx.FullName pack /d $releasePath /p $msixPath /o
          if ($LASTEXITCODE -ne 0) { Write-Error "❌ makeappx failed"; exit 1 }

          & $signtool.FullName sign /f $certPath /p $password /fd SHA256 /v $msixPath
          if ($LASTEXITCODE -ne 0) { Write-Error "❌ signtool failed"; exit 1 }

          Write-Host "✅ Signed MSIX package created at $msixPath"
        shell: pwsh

      - name: Upload MSIX Artifact
        uses: actions/upload-artifact@v4
        with:
          name: STINO_Windows_MSIX
          path: build/msix/STINO_Installer.msix